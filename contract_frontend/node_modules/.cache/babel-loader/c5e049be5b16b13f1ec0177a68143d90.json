{"ast":null,"code":"import _regeneratorRuntime from \"/Users/muhammadwaqaskhan/Desktop/ContractManagement/contract_managementv1/contract_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(fetchRegions),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(onFetchRegionStart),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addRegions),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(onAddRegionStart),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(delRegions),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(onDelRegionStart);\n\nimport { takeEvery, takeLatest, put, call } from 'redux-saga/effects';\nimport * as CONFIG_types from './config.types';\nimport axios from '../../utils1.js/axios';\nimport { delRegionStart, delRegionSuccess, delRegionFailure, addRegionStart, addRegionSuccess, addRegionFailure, fetchRegionStart, fetchRegionSuccess, fetchRegionFailure } from './config.actions'; //Fetch Region Saga\n\nexport function fetchRegions() {\n  var regionList;\n  return _regeneratorRuntime.wrap(function fetchRegions$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          console.log('running axios');\n          _context.next = 4;\n          return axios.get(\"/basic/region/\");\n\n        case 4:\n          regionList = _context.sent;\n          console.log(regionList);\n          _context.next = 8;\n          return put(fetchRegionSuccess(regionList.data));\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put(fetchRegionFailure(_context.t0.message));\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\nexport function onFetchRegionStart() {\n  return _regeneratorRuntime.wrap(function onFetchRegionStart$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(CONFIG_types.FETCH_REGION_START, fetchRegions);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} //Add Region Saga\n\nexport function addRegions(action) {\n  var regionList;\n  return _regeneratorRuntime.wrap(function addRegions$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          console.log('running axios');\n          _context3.next = 4;\n          return axios.post(\"/basic/region/\", action.payload);\n\n        case 4:\n          regionList = _context3.sent;\n          console.log(regionList);\n          _context3.next = 8;\n          return put(addRegionSuccess(regionList.data));\n\n        case 8:\n          _context3.next = 14;\n          break;\n\n        case 10:\n          _context3.prev = 10;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 14;\n          return put(addRegionFailure(_context3.t0.message));\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 10]]);\n}\nexport function onAddRegionStart() {\n  return _regeneratorRuntime.wrap(function onAddRegionStart$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(CONFIG_types.ADD_REGION_START, addRegions);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n} //Delete Region Saga\n\nexport function delRegions(action) {\n  var regionList;\n  return _regeneratorRuntime.wrap(function delRegions$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          console.log('running axios');\n          _context5.next = 4;\n          return axios.delete(\"/basic/region/\" + action.payload.id);\n\n        case 4:\n          regionList = _context5.sent;\n          console.log(regionList);\n          _context5.next = 8;\n          return put(delRegionSuccess(regionList.data));\n\n        case 8:\n          _context5.next = 14;\n          break;\n\n        case 10:\n          _context5.prev = 10;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 14;\n          return put(delRegionFailure(_context5.t0.message));\n\n        case 14:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 10]]);\n}\nexport function onDelRegionStart() {\n  return _regeneratorRuntime.wrap(function onDelRegionStart$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(CONFIG_types.DEL_REGION_START, delRegions);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}","map":{"version":3,"sources":["/Users/muhammadwaqaskhan/Desktop/ContractManagement/contract_managementv1/contract_frontend/src/redux/config/config.sagas.js"],"names":["fetchRegions","onFetchRegionStart","addRegions","onAddRegionStart","delRegions","onDelRegionStart","takeEvery","takeLatest","put","call","CONFIG_types","axios","delRegionStart","delRegionSuccess","delRegionFailure","addRegionStart","addRegionSuccess","addRegionFailure","fetchRegionStart","fetchRegionSuccess","fetchRegionFailure","console","log","get","regionList","data","message","FETCH_REGION_START","action","post","payload","ADD_REGION_START","delete","id","DEL_REGION_START"],"mappings":"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","sourcesContent":["import { takeEvery, takeLatest, put, call } from 'redux-saga/effects'\n\nimport * as CONFIG_types from './config.types';\nimport axios from '../../utils1.js/axios'\n\nimport {\n    delRegionStart,\n    delRegionSuccess,\n    delRegionFailure,\n    addRegionStart,\n    addRegionSuccess,\n    addRegionFailure,\n    fetchRegionStart,\n    fetchRegionSuccess,\n    fetchRegionFailure\n} from './config.actions'\n\n//Fetch Region Saga\nexport function* fetchRegions() {\n    try {\n        console.log('running axios')\n        const regionList = yield axios.get(`/basic/region/`);\n        console.log(regionList)\n\n        yield put(fetchRegionSuccess(regionList.data));\n    } catch (error) {\n        yield put(fetchRegionFailure(error.message));\n    }\n}\n\nexport function* onFetchRegionStart() {\n        yield takeLatest(CONFIG_types.FETCH_REGION_START, fetchRegions);\n    }\n    //Add Region Saga\nexport function* addRegions(action) {\n    try {\n        console.log('running axios')\n        const regionList = yield axios.post(`/basic/region/`, action.payload);\n        console.log(regionList)\n\n        yield put(addRegionSuccess(regionList.data));\n    } catch (error) {\n        yield put(addRegionFailure(error.message));\n    }\n}\n\nexport function* onAddRegionStart() {\n    yield takeLatest(CONFIG_types.ADD_REGION_START, addRegions);\n}\n\n//Delete Region Saga\nexport function* delRegions(action) {\n    try {\n        console.log('running axios')\n        const regionList = yield axios.delete(`/basic/region/` + action.payload.id);\n        console.log(regionList)\n\n        yield put(delRegionSuccess(regionList.data));\n    } catch (error) {\n        yield put(delRegionFailure(error.message));\n    }\n}\n\nexport function* onDelRegionStart() {\n    yield takeLatest(CONFIG_types.DEL_REGION_START, delRegions);\n}"]},"metadata":{},"sourceType":"module"}