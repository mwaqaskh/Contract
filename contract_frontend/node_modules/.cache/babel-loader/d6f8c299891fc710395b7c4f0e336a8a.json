{"ast":null,"code":"import { Chart as ChartJS } from \"react-chartjs-2\";\n\nChartJS.elements.Rectangle.prototype.draw = function () {\n  var ctx = this._chart.ctx;\n  var vm = this._view;\n  var left, right, top, bottom, signX, signY, borderSkipped;\n  var borderWidth = vm.borderWidth; // If radius is less than 0 or is large enough to cause drawing errors a max\n  // radius is imposed. If cornerRadius is not defined set it to 0.\n\n  var cornerRadius = this._chart.config.options.cornerRadius;\n\n  if (cornerRadius < 0) {\n    cornerRadius = 0;\n  }\n\n  if (typeof cornerRadius == \"undefined\") {\n    cornerRadius = 0;\n  }\n\n  if (!vm.horizontal) {\n    left = vm.x - vm.width / 2;\n    right = vm.x + vm.width / 2;\n    top = vm.y;\n    bottom = vm.base;\n    signX = 1;\n    signY = bottom > top ? 1 : -1;\n    borderSkipped = vm.borderSkipped || \"bottom\";\n  } // Canvas doesn't allow us to stroke inside the width so we can\n  // adjust the sizes to fit if we're setting a stroke on the line\n\n\n  if (borderWidth) {\n    // borderWidth shold be less than bar width and bar height.\n    var barSize = Math.min(Math.abs(left - right), Math.abs(top - bottom));\n    borderWidth = borderWidth > barSize ? barSize : borderWidth;\n    var halfStroke = borderWidth / 2; // Adjust borderWidth when bar top position is near vm.base(zero).\n\n    var borderLeft = left + (borderSkipped !== \"left\" ? halfStroke * signX : 0);\n    var borderRight = right + (borderSkipped !== \"right\" ? -halfStroke * signX : 0);\n    var borderTop = top + (borderSkipped !== \"top\" ? halfStroke * signY : 0);\n    var borderBottom = bottom + (borderSkipped !== \"bottom\" ? -halfStroke * signY : 0); // not become a vertical line?\n\n    if (borderLeft !== borderRight) {\n      top = borderTop;\n      bottom = borderBottom;\n    } // not become a horizontal line?\n\n\n    if (borderTop !== borderBottom) {\n      left = borderLeft;\n      right = borderRight;\n    }\n  }\n\n  ctx.beginPath();\n  ctx.fillStyle = vm.backgroundColor;\n  ctx.strokeStyle = vm.borderColor;\n  ctx.lineWidth = borderWidth; // Corner points, from bottom-left to bottom-right clockwise\n  // | 1 2 |\n  // | 0 3 |\n\n  var corners = [[left, bottom], [left, top], [right, top], [right, bottom]]; // Find first (starting) corner with fallback to 'bottom'\n\n  var borders = [\"bottom\", \"left\", \"top\", \"right\"];\n  var startCorner = borders.indexOf(borderSkipped, 0);\n\n  if (startCorner === -1) {\n    startCorner = 0;\n  }\n\n  function cornerAt(index) {\n    return corners[(startCorner + index) % 4];\n  } // Draw rectangle from 'startCorner'\n\n\n  var corner = cornerAt(0);\n  ctx.moveTo(corner[0], corner[1]);\n\n  for (var i = 1; i < 4; i++) {\n    corner = cornerAt(i);\n    var nextCornerId = i + 1;\n\n    if (nextCornerId === 4) {\n      nextCornerId = 0;\n    }\n\n    var width = corners[2][0] - corners[1][0];\n    var height = corners[0][1] - corners[1][1];\n    var x = corners[1][0];\n    var y = corners[1][1];\n    var radius = cornerRadius; // Fix radius being too large\n\n    if (radius > Math.abs(height) / 1.5) {\n      radius = Math.floor(Math.abs(height) / 1.5);\n    }\n\n    if (radius > Math.abs(width) / 1.5) {\n      radius = Math.floor(Math.abs(width) / 1.5);\n    }\n\n    if (height < 0) {\n      // Negative values in a standard bar chart\n      var x_tl = x;\n      var x_tr = x + width;\n      var y_tl = y + height;\n      var y_tr = y + height;\n      var x_bl = x;\n      var x_br = x + width;\n      var y_bl = y;\n      var y_br = y; // Draw\n\n      ctx.moveTo(x_bl + radius, y_bl);\n      ctx.lineTo(x_br - radius, y_br);\n      ctx.quadraticCurveTo(x_br, y_br, x_br, y_br - radius);\n      ctx.lineTo(x_tr, y_tr + radius);\n      ctx.quadraticCurveTo(x_tr, y_tr, x_tr - radius, y_tr);\n      ctx.lineTo(x_tl + radius, y_tl);\n      ctx.quadraticCurveTo(x_tl, y_tl, x_tl, y_tl + radius);\n      ctx.lineTo(x_bl, y_bl - radius);\n      ctx.quadraticCurveTo(x_bl, y_bl, x_bl + radius, y_bl);\n    } else {\n      ctx.moveTo(x + radius, y);\n      ctx.lineTo(x + width - radius, y);\n      ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n      ctx.lineTo(x + width, y + height - radius);\n      ctx.quadraticCurveTo(x + width, y + height, x + width, y + height);\n      ctx.lineTo(x + radius, y + height);\n      ctx.quadraticCurveTo(x, y + height, x, y + height);\n      ctx.lineTo(x, y + radius);\n      ctx.quadraticCurveTo(x, y, x + radius, y);\n    }\n  }\n\n  ctx.fill();\n\n  if (borderWidth) {\n    ctx.stroke();\n  }\n};","map":{"version":3,"sources":["/Users/muhammadwaqaskhan/Desktop/ContractManagement/contract_managementv1/contract_frontend/src/vendor/roundedBarCharts.js"],"names":["Chart","ChartJS","elements","Rectangle","prototype","draw","ctx","_chart","vm","_view","left","right","top","bottom","signX","signY","borderSkipped","borderWidth","cornerRadius","config","options","horizontal","x","width","y","base","barSize","Math","min","abs","halfStroke","borderLeft","borderRight","borderTop","borderBottom","beginPath","fillStyle","backgroundColor","strokeStyle","borderColor","lineWidth","corners","borders","startCorner","indexOf","cornerAt","index","corner","moveTo","i","nextCornerId","height","radius","floor","x_tl","x_tr","y_tl","y_tr","x_bl","x_br","y_bl","y_br","lineTo","quadraticCurveTo","fill","stroke"],"mappings":"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","sourcesContent":["import { Chart as ChartJS } from \"react-chartjs-2\";\r\n\r\nChartJS.elements.Rectangle.prototype.draw = function () {\r\n  const ctx = this._chart.ctx;\r\n  const vm = this._view;\r\n  let left, right, top, bottom, signX, signY, borderSkipped;\r\n  let borderWidth = vm.borderWidth;\r\n\r\n  // If radius is less than 0 or is large enough to cause drawing errors a max\r\n  // radius is imposed. If cornerRadius is not defined set it to 0.\r\n  let cornerRadius = this._chart.config.options.cornerRadius;\r\n  if (cornerRadius < 0) {\r\n    cornerRadius = 0;\r\n  }\r\n  if (typeof cornerRadius == \"undefined\") {\r\n    cornerRadius = 0;\r\n  }\r\n\r\n  if (!vm.horizontal) {\r\n    left = vm.x - vm.width / 2;\r\n    right = vm.x + vm.width / 2;\r\n    top = vm.y;\r\n    bottom = vm.base;\r\n    signX = 1;\r\n    signY = bottom > top ? 1 : -1;\r\n    borderSkipped = vm.borderSkipped || \"bottom\";\r\n  }\r\n\r\n  // Canvas doesn't allow us to stroke inside the width so we can\r\n  // adjust the sizes to fit if we're setting a stroke on the line\r\n  if (borderWidth) {\r\n    // borderWidth shold be less than bar width and bar height.\r\n    const barSize = Math.min(Math.abs(left - right), Math.abs(top - bottom));\r\n    borderWidth = borderWidth > barSize ? barSize : borderWidth;\r\n    const halfStroke = borderWidth / 2;\r\n    // Adjust borderWidth when bar top position is near vm.base(zero).\r\n    const borderLeft =\r\n      left + (borderSkipped !== \"left\" ? halfStroke * signX : 0);\r\n    const borderRight =\r\n      right + (borderSkipped !== \"right\" ? -halfStroke * signX : 0);\r\n    const borderTop = top + (borderSkipped !== \"top\" ? halfStroke * signY : 0);\r\n    const borderBottom =\r\n      bottom + (borderSkipped !== \"bottom\" ? -halfStroke * signY : 0);\r\n    // not become a vertical line?\r\n    if (borderLeft !== borderRight) {\r\n      top = borderTop;\r\n      bottom = borderBottom;\r\n    }\r\n    // not become a horizontal line?\r\n    if (borderTop !== borderBottom) {\r\n      left = borderLeft;\r\n      right = borderRight;\r\n    }\r\n  }\r\n\r\n  ctx.beginPath();\r\n  ctx.fillStyle = vm.backgroundColor;\r\n  ctx.strokeStyle = vm.borderColor;\r\n  ctx.lineWidth = borderWidth;\r\n\r\n  // Corner points, from bottom-left to bottom-right clockwise\r\n  // | 1 2 |\r\n  // | 0 3 |\r\n  const corners = [\r\n    [left, bottom],\r\n    [left, top],\r\n    [right, top],\r\n    [right, bottom],\r\n  ];\r\n\r\n  // Find first (starting) corner with fallback to 'bottom'\r\n  const borders = [\"bottom\", \"left\", \"top\", \"right\"];\r\n  let startCorner = borders.indexOf(borderSkipped, 0);\r\n  if (startCorner === -1) {\r\n    startCorner = 0;\r\n  }\r\n\r\n  function cornerAt(index) {\r\n    return corners[(startCorner + index) % 4];\r\n  }\r\n\r\n  // Draw rectangle from 'startCorner'\r\n  let corner = cornerAt(0);\r\n  ctx.moveTo(corner[0], corner[1]);\r\n\r\n  for (let i = 1; i < 4; i++) {\r\n    corner = cornerAt(i);\r\n    let nextCornerId = i + 1;\r\n    if (nextCornerId === 4) {\r\n      nextCornerId = 0;\r\n    }\r\n\r\n    const width = corners[2][0] - corners[1][0];\r\n    const height = corners[0][1] - corners[1][1];\r\n    const x = corners[1][0];\r\n    const y = corners[1][1];\r\n\r\n    let radius = cornerRadius;\r\n\r\n    // Fix radius being too large\r\n    if (radius > Math.abs(height) / 1.5) {\r\n      radius = Math.floor(Math.abs(height) / 1.5);\r\n    }\r\n    if (radius > Math.abs(width) / 1.5) {\r\n      radius = Math.floor(Math.abs(width) / 1.5);\r\n    }\r\n\r\n    if (height < 0) {\r\n      // Negative values in a standard bar chart\r\n      const x_tl = x;\r\n      const x_tr = x + width;\r\n      const y_tl = y + height;\r\n      const y_tr = y + height;\r\n\r\n      const x_bl = x;\r\n      const x_br = x + width;\r\n      const y_bl = y;\r\n      const y_br = y;\r\n\r\n      // Draw\r\n      ctx.moveTo(x_bl + radius, y_bl);\r\n      ctx.lineTo(x_br - radius, y_br);\r\n      ctx.quadraticCurveTo(x_br, y_br, x_br, y_br - radius);\r\n      ctx.lineTo(x_tr, y_tr + radius);\r\n      ctx.quadraticCurveTo(x_tr, y_tr, x_tr - radius, y_tr);\r\n      ctx.lineTo(x_tl + radius, y_tl);\r\n      ctx.quadraticCurveTo(x_tl, y_tl, x_tl, y_tl + radius);\r\n      ctx.lineTo(x_bl, y_bl - radius);\r\n      ctx.quadraticCurveTo(x_bl, y_bl, x_bl + radius, y_bl);\r\n    } else {\r\n      ctx.moveTo(x + radius, y);\r\n      ctx.lineTo(x + width - radius, y);\r\n      ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n      ctx.lineTo(x + width, y + height - radius);\r\n      ctx.quadraticCurveTo(x + width, y + height, x + width, y + height);\r\n      ctx.lineTo(x + radius, y + height);\r\n      ctx.quadraticCurveTo(x, y + height, x, y + height);\r\n      ctx.lineTo(x, y + radius);\r\n      ctx.quadraticCurveTo(x, y, x + radius, y);\r\n    }\r\n  }\r\n\r\n  ctx.fill();\r\n  if (borderWidth) {\r\n    ctx.stroke();\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}